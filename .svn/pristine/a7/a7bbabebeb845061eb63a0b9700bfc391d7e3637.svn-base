/*
 * Created on Dec 11, 2013
 *
 * To change the template for this generated file go to
 * Window&gt;Preferences&gt;Java&gt;Code Generation&gt;Code and Comments
 */
package com.cisco.pims.Core;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedHashSet;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import com.cisco.pims.Utilities.CustomFTP;
import com.cisco.pims.Utilities.CustomSFTP;

public class PIMSProcess {
	private Connection pimsCon;
	private static PIMSHelper helper;
	private static String osName = null;
	private PIMSLogging pimsLogging = null;
	private static Properties propFile = new Properties();

	public PIMSProcess(Connection lclCon) {
		this.pimsCon = lclCon;
	}

	public static void main(String args[]) {
		Connection lclCon = null;
		InputStream inStream = null;
		DBConnectionFactory pimsDAO = new DBConnectionFactory();
		helper = new PIMSHelper();
		PreparedStatement pstmt = null;
		ResultSet rSet = null;
		String processName = null;
		int batchid = 0;

		// Determine underlying OS where this program is run
		osName = System.getProperty("os.name").contains("Windows") ? "Windows"
				: "Other";

		// Unix/Linux environment logic
		if (!osName.equalsIgnoreCase("Windows")) {
			if (args.length == 1) {
				processName = args[0];
			} else if (args.length > 1) {
				processName = args[0];
				batchid = Integer.parseInt(args[1]);
			} else {
				System.out.println("Please pass arguments in below order:");
				System.out.println("1. properties file Location.(Mandatory)");
				System.out.println("2. Process Name.(Mandatory)");
				System.out.println("2. Batch ID.(Optional)");
			}
		}

		// Windows environment logic
		else if (args.length == 1)
			processName = args[0];
		else if (args.length > 1) {
			processName = args[0];
			batchid = Integer.parseInt(args[1]);
		} else
			processName = "30_40";

		try {
			inStream = PIMSProcess.class
					.getResourceAsStream("PIMSProperties.properties");
			propFile.load(inStream);
			inStream.close();
			lclCon = pimsDAO.connect("mssql",
					propFile.getProperty("MSSQLServer"),
					propFile.getProperty("DBUserName"),
					propFile.getProperty("DBPassword"));
			PIMSProcess pimsProcess = new PIMSProcess(lclCon);
			pimsProcess.pimsCon.setAutoCommit(false);
			pimsProcess.pimsLogging = new PIMSLogging(pimsProcess.pimsCon, propFile.getProperty("Environment"));
			
			if (processName.equals("17_20")) { // 17_20 Process
				pstmt = batchid > 0 ? DBConnectionFactory.prepareStatement(
						pimsProcess.pimsCon, PIMSConstants.QUERYBATCH, batchid,
						PIMSConstants.STATUS_17) : DBConnectionFactory
						.prepareStatement(pimsProcess.pimsCon,
								PIMSConstants.QUERYSTATUS,
								PIMSConstants.STATUS_17);
				rSet = pstmt.executeQuery();
				while (rSet.next())
					pimsProcess.prepareProductTable_17_20(rSet
							.getInt("BATCH_ID"));
			} else if (processName.equals("20_30")) { // 20_30 Process
				pstmt = batchid > 0 ? DBConnectionFactory.prepareStatement(
						pimsProcess.pimsCon, PIMSConstants.QUERYBATCH, batchid,
						PIMSConstants.STATUS_20) : DBConnectionFactory
						.prepareStatement(pimsProcess.pimsCon,
								PIMSConstants.QUERYSTATUS,
								PIMSConstants.STATUS_20);
				rSet = pstmt.executeQuery();
				while (rSet.next())
					pimsProcess.generateNothingBlob_20_30(rSet
							.getInt("BATCH_ID"));
			} else if (processName.equals("30_40")) { // 30_40 Process
				pimsProcess.process30_40();
			} else if (processName.equals("40_50")) { // 40_50 Process
				pstmt = batchid > 0 ? DBConnectionFactory.prepareStatement(
						pimsProcess.pimsCon, PIMSConstants.QUERYBATCH_40_50,
						batchid, PIMSConstants.STATUS_40) : DBConnectionFactory
						.prepareStatement(pimsProcess.pimsCon,
								PIMSConstants.QUERY_40_50,
								PIMSConstants.STATUS_40);
				rSet = pstmt.executeQuery();
				while (rSet.next())
					pimsProcess.process_40_50(
							rSet.getInt("BATCH_ID"),
							rSet.getBytes("EMM1_BLOB"),
							rSet.getBytes("EMM2_BLOB"));

			} else if (processName.equals("50_70")) { // 50_70 Process
				pstmt = batchid > 0 ? DBConnectionFactory.prepareStatement(
						pimsProcess.pimsCon, PIMSConstants.QUERYBATCH_50_70,
						batchid, PIMSConstants.STATUS_50) : DBConnectionFactory
						.prepareStatement(pimsProcess.pimsCon,
								PIMSConstants.QUERY_50_70,
								PIMSConstants.STATUS_50);
				rSet = pstmt.executeQuery();
				while (rSet.next())
				pimsProcess.process_50_70(rSet.getInt("BATCH_ID"),
						rSet.getString("DELIVERY_ID"),
						rSet.getString("INFO1"));
			} else {
				System.out.println("Invalid process Name, valid values:");
				System.out.println("17_20/20_30/30_40/40_50/50_70");
			}

		} catch (NumberFormatException ne) {

		} catch (SQLException sql) {

		} catch (IOException e) {
		} finally {
			DBConnectionFactory.close(lclCon, pstmt, rSet);
			// SendMail sendMail = new SendMail(
			// propFile.getProperty("MailUserName"),
			// propFile.getProperty("MailPassword"),
			// propFile.getProperty("MailServer"),
			// propFile.getProperty("MailPort"));
			// String mailBody = sendMail.formatMessage(pimsDAO.statusMessage);
			// sendMail.sendMail(processName + " Process update", mailBody,
			// propFile.getProperty("FromEmail"),
			// propFile.getProperty("ToEmail"));
		}

	}


	private void process_50_70(int batchid, String delID, String info1) {
		String baseDir = null;
		String readQuery = null;
		String tStr = null;
		String parentFolder = null;
		String tarFileLoc = null;
		Map<String, byte[]> mBlobs = new HashMap<String, byte[]>();
		File dir = null;
		FileOutputStream fos = null;
		ResultSet rSet1 = null;
		if (osName.equalsIgnoreCase("Windows")) {
			baseDir = propFile.getProperty("WindowsTempFileLoc");
			tarFileLoc = propFile.getProperty("WindowsTarFile");
		} else {
			baseDir = propFile.getProperty("UnixFileLoc");
			tarFileLoc = propFile.getProperty("UnixTarFile");
		}
		if (baseDir == null || tarFileLoc == null) {
			System.out
					.println("Tar File Location or temp Directory missing in properties file");
			System.out.println("Tar File Location=" + tarFileLoc);
			System.out.println("Temp Dir=" + baseDir);
			System.exit(0);
		}

		try {
				mBlobs = generateBlobs(batchid);
				if (info1 != null)
					parentFolder = info1 + "-" + delID + "-COMPLETE";
				else
					parentFolder = delID + "-COMPLETE";

				dir = new File(baseDir + parentFolder);
				if (dir.exists()) {
					PIMSHelper.fileDelete(dir);
				} else
					dir.mkdir();
				tStr = parentFolder + "/inventry";
				dir = new File(baseDir + tStr);
				dir.createNewFile();
				fos = new FileOutputStream(dir);
				fos.write(mBlobs.get("INV"));
				fos.close();
				mBlobs.remove("INV");

				tStr = parentFolder + "/toc";
				dir = new File(baseDir + tStr);
				dir.createNewFile();
				fos = new FileOutputStream(dir);
				fos.write(mBlobs.get("TOC"));
				fos.close();
				mBlobs.remove("TOC");

				tStr = parentFolder + "/dncs";
				dir = new File(baseDir + tStr);
				dir.mkdir();

				tStr = parentFolder + "/dncs/revlist";
				dir = new File(baseDir + tStr);
				dir.createNewFile();

				tStr = parentFolder + "/dncs" + "/bootpgs";
				dir = new File(baseDir + tStr);
				dir.mkdir();
				tStr = parentFolder + "/dncs" + "/cauth";
				dir = new File(baseDir + tStr);
				dir.mkdir();
				readQuery = "select * from dbo.pims_ca_certificates";
//				rSet1 = this.readDataFromTable(readQuery);
				while (rSet1.next()) {
					tStr = parentFolder + "/dncs" + "/cauth/"
							+ rSet1.getString("CERTIFICATE_NAME");
					dir = new File(baseDir + tStr);
					dir.createNewFile();
					fos = new FileOutputStream(dir);
					String hexValue = rSet1.getString("CERTIFICATE_BLOB");
					byte[] byteValue = helper.hexStringToByteArray(hexValue);
					fos.write(byteValue);
					fos.close();
				}
				rSet1.close();
				tStr = parentFolder + "/dncs" + "/dhcts";
				dir = new File(baseDir + tStr);
				dir.mkdir();
				for (String mac : mBlobs.keySet()) {
					tStr = parentFolder + "/dncs" + "/dhcts/" + mac;
					dir = new File(baseDir + tStr);
					dir.createNewFile();
					fos = new FileOutputStream(dir);
					byte[] byteValue = mBlobs.get(mac);// rSet1.getString("EMM_FILE");
					// byte[] byteValue = helper.hexStringToByteArray(hexValue);
					fos.write(byteValue);
					fos.close();
				}

				tStr = parentFolder + "/dncs" + "/hcttypes";
				dir = new File(baseDir + tStr);
				dir.mkdir();
				readQuery = "SELECT sq.filename, t.file_data FROM (SELECT distinct filename FROM dbo.PIMS_TYPE_FILES t, dbo.PIMS_EMM_BUILD_STRATEGY ebs, "
						+ "(SELECT DISTINCT s.model, s.hw_rev, m.mfg_id,m.mac_prefix FROM dbo.PIMS_PRODUCT s, dbo.PIMS_MFG_MAC_ADDR_RANGE m,"
						+ " dbo.PIMS_BATCH_DETAIL er WHERE er.batch_id="
						+ batchid
						+ " AND er.dhct_sn = s.dhct_sn AND m.mac_prefix=substring(s.mac_addr,1,6)"
						+ " ) psq WHERE psq.model = ebs.model AND psq.hw_rev = ebs.hw_rev AND psq.mfg_id = ebs.mfg_id AND ebs.model=t.dhct_type "
						+ "AND ebs.hw_rev=t.dhct_rev AND ebs.mfg_id=t.mfg_id AND ((SELECT CASE WHEN ebs.strategy = 'MFG_ID' THEN psq.mfg_id ELSE psq.mac_prefix"
						+ " END) = t.mac_ref ) )sq, PIMS_TYPE_FILES t WHERE t.filename = sq.filename";
//				rSet1 = readDataFromTable(readQuery);
				while (rSet1.next()) {
					tStr = parentFolder + "/dncs" + "/hcttypes/"
							+ rSet1.getString("FILENAME");
					dir = new File(baseDir + tStr);
					dir.createNewFile();
					fos = new FileOutputStream(dir);
					fos.write(rSet1.getBytes("FILE_DATA"));
					fos.close();
				}
				rSet1.close();
				tStr = delID + "-" + helper.randomBatchID(batchid) + ".tar";
				dir = new File(tarFileLoc + tStr);
				File dir1 = new File(baseDir);
				PIMSHelper.zip(dir1, dir);
				File delFolder = new File(baseDir + parentFolder);
				PIMSHelper.fileDelete(delFolder);
//			}
		} catch (SQLException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private Map<String, byte[]> generateBlobs(int batchid) throws SQLException {
		ResultSet rSet = null;
		byte[] byteValue = null;
		String tStr = null;
		int i = 0;
		int tInt = 0;
		Set<byte[]> tocblobData = new LinkedHashSet<byte[]>();
		Set<byte[]> invblobData = new LinkedHashSet<byte[]>();
		Map<String, byte[]> mBlobs = new LinkedHashMap<String, byte[]>();
		String readQuery = "SELECT distinct "
				+ "d.dhct_sn, "
				+ "p.cust_caa_id, "
				+ "p.mac_addr, "
				+ "p.emm_file, "
				+ "p.MODEL, "
				+ "p.hw_rev, "
				+ "p.mfg_id, "
				+ "ebs.strategy "
				+ "FROM dbo.pims_BATCH_detail d "
				+ "join dbo.pims_PRODUCT p on p.dhct_sn = d.dhct_sn "
				+ "join dbo.pims_EMM_BUILD_STRATEGY ebs on p.mfg_id = ebs.mfg_id "
				+ "AND p.MODEL = ebs.MODEL AND p.hw_rev = ebs.hw_rev "
				+ "WHERE d.batch_id = " + batchid;
//		rSet = this.readDataFromTable(readQuery);
		while (rSet.next()) {
			mBlobs.put(rSet.getString("MAC_ADDR"),
					helper.hexStringToByteArray(rSet.getString("EMM_FILE")));

			// //Build TOC BLOB/////
			byte[] tocBlob = new byte[36];
			byte[] invBlob = new byte[49];
			byte[] invfinalBlob = new byte[67 + 49];
			tStr = rSet.getString("DHCT_SN");
			tStr = String.format("%-9s", tStr);
			byteValue = tStr.getBytes();
			System.arraycopy(byteValue, 0, tocBlob, 0, byteValue.length);

			i = byteValue.length;
			tStr = "00";
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, tocBlob, i, byteValue.length);

			i = i + byteValue.length;
			tStr = rSet.getString("MAC_ADDR");
			tStr = tStr.toUpperCase();
			tStr = tStr.replaceAll("..", "$0:").substring(0, 17);
			tStr = tStr + Character.toString('\0');
			byteValue = tStr.getBytes();
			System.arraycopy(byteValue, 0, tocBlob, i, byteValue.length); // MAC

			i = i + byteValue.length;
			tStr = rSet.getString("MODEL");
			tInt = Integer.parseInt(tStr);
			tStr = helper.convertIntToHex(tInt);
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, tocBlob, i, byteValue.length); // MODEL

			i = i + byteValue.length;
			tStr = rSet.getString("HW_REV");
			tInt = Integer.parseInt(tStr);
			tStr = helper.convertIntToHex(tInt);
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, tocBlob, i, byteValue.length); // HWREV

			// EBS Strategy
			i = i + byteValue.length;
			if (rSet.getString("STRATEGY").equals("MFG_ID"))
				tStr = rSet.getString("MFG_ID");
			else
				tStr = rSet.getString("MAC_ADDR").substring(0, 6);
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, tocBlob, i, byteValue.length); // mfg_id/MAC
																			// FIRST
																			// 6
																			// CHARS

			i = i + byteValue.length;
			tStr = "00";
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, tocBlob, i, byteValue.length);
			tocblobData.add(tocBlob);

			// //Build INV BLOB///
			i = 0;
			tStr = rSet.getString("DHCT_SN");
			tStr = String.format("%-9s", tStr);
			byteValue = tStr.getBytes();
			System.arraycopy(byteValue, 0, invBlob, 0, byteValue.length);

			i = i + byteValue.length;
			tStr = "00";
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length);

			i = i + byteValue.length;
			tStr = rSet.getString("MAC_ADDR");
			tStr = tStr.toUpperCase();
			tStr = tStr.replaceAll("..", "$0:").substring(0, 17);
			// tStr = tStr + Character.toString('\0');
			byteValue = tStr.getBytes();
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length); // MAC

			i = i + byteValue.length;
			tStr = "00";
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length);

			i = i + byteValue.length;
			tStr = "00000000000000000000000000";
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length);

			i = i + byteValue.length;
			tStr = "00";
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length);

			i = i + byteValue.length;
			tStr = rSet.getString("MODEL");
			tInt = Integer.parseInt(tStr);
			tStr = helper.convertIntToHex(tInt);
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length); // MODEL

			i = i + byteValue.length;
			tStr = rSet.getString("HW_REV");
			tInt = Integer.parseInt(tStr);
			tStr = helper.convertIntToHex(tInt);
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length); // HWREV

			// EBS Strategy
			i = i + byteValue.length;
			if (rSet.getString("STRATEGY").equals("MFG_ID"))
				tStr = rSet.getString("MFG_ID");
			else
				tStr = rSet.getString("MAC_ADDR").substring(0, 6);
			byteValue = helper.hexStringToByteArray(tStr);
			System.arraycopy(byteValue, 0, invBlob, i, byteValue.length); // mfg_id/MAC
																			// FIRST
																			// 6
																			// CHARS

			byte[] emptyBlob = createEmptyBlob();
			i = i + byteValue.length;
			System.arraycopy(emptyBlob, 0, invfinalBlob, i, emptyBlob.length); // Add
																				// empty
																				// Blob

			i = emptyBlob.length;
			System.arraycopy(invBlob, 0, invfinalBlob, i, invBlob.length);
			invblobData.add(invfinalBlob);
		}
		int len = tocblobData.size();
		byte[] tocFinal_Blob = new byte[36 * len];
		len = invblobData.size();
		byte[] invfinalBlob = new byte[116 * len];
		i = 0;
		for (byte[] bytes : tocblobData) {
			System.arraycopy(bytes, 0, tocFinal_Blob, i, bytes.length);
			i = i + bytes.length;
		}
		i = 0;
		if (tocFinal_Blob != null)
			mBlobs.put("TOC", tocFinal_Blob);
		for (byte[] bytes : invblobData) {
			System.arraycopy(bytes, 0, invfinalBlob, i, bytes.length);
			i = i + bytes.length;
		}
		if (invfinalBlob != null)
			mBlobs.put("INV", invfinalBlob);

		return mBlobs;
	}

	private byte[] createEmptyBlob() {
		byte[] emptyBlob = new byte[67];
		byte[] byteValue = null;
		String tStr = null;
		int i = 0;

		tStr = "000000000000000000";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "00";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "0000000000000000000000000000000000";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "00";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "0000000000000000000000000000000000";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "00";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "00000000000000000000000000";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "00";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "0000";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "0000";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);

		i = i + byteValue.length;
		tStr = "000000";
		byteValue = helper.hexStringToByteArray(tStr);
		System.arraycopy(byteValue, 0, emptyBlob, i, byteValue.length);
		return emptyBlob;
	}

	private void process_40_50(int batchid, byte[] emm1,byte[] emm2) {
		PreparedStatement pstmt = null;
		
		byte[] sn1 = new byte[9];
		byte[] sn2 = new byte[9];
		byte[] mfgByte = new byte[14];
		
		int i = 0;
		int len = 0;
		int len1 = 0;
		int len2 = 0;
		int tVal = 0;
		int tInt = 0;
		
		String serialNumber = null;
		String tStr = null;
		
		Map<String, String> mValues = new HashMap<String, String>();

		byte[] emm1_Blob = new byte[308];
		byte[] emm2_Blob = new byte[308];
		byte[] raw1 = new byte[44];
		byte[] byteValue = null;
		try {
			this.logMessage(
					batchid,
					serialNumber,
					null,
					pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(),
					pimsLogging.getSuccessMsgId(),
					"Entered 40_50 Process batchid:"+batchid);

			while ((i * 339) < emm1.length) {
					len = i * 339;
					len1 = (i * 339) + 323;
					serialNumber = helper.getByteToStringValues(emm1, len, sn1, 0, 9);
					tStr = helper.getByteToStringValues(emm2, len, sn2, 0, 9);
					len = i * 339;

					mValues = this.readValuesForSN(serialNumber);
					mValues.put("MFGDATE", helper.getByteToStringValues(emm1,
							len1, mfgByte, 0, 14));
					len2 = (i * 339) + 15;
					System.arraycopy(emm1, len2, emm1_Blob, 0, 308);
					System.arraycopy(emm2, len2, emm2_Blob, 0, 308);
					i++;

					// /////////////////Build RAW 1 data///////////////////
					tStr = mValues.get("MAC");
					tStr = tStr.toUpperCase();
					tStr = tStr.replaceAll("..", "$0:").substring(0, 17);
					tStr = tStr + Character.toString('\0');
					byteValue = tStr.getBytes();
					System.arraycopy(byteValue, 0, raw1, 0, byteValue.length); // MAC

					tStr = mValues.get("SMSN");
					tStr = tStr.toUpperCase();
					tStr = tStr.replaceAll("..", "$0:").substring(0, 17);
					tStr = tStr + Character.toString('\0');
					byteValue = tStr.getBytes();
					tVal = byteValue.length;
					System.arraycopy(byteValue, 0, raw1, tVal, byteValue.length); // SMSN

					tVal = tVal + byteValue.length;
					tStr = mValues.get("MODEL");
					tInt = Integer.parseInt(tStr);
					tStr = helper.convertIntToHex(tInt);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw1, tVal, byteValue.length); // MODEL

					tVal = tVal + byteValue.length;
					tStr = mValues.get("HWREV");
					tInt = Integer.parseInt(tStr);
					tStr = helper.convertIntToHex(tInt);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw1, tVal, byteValue.length); // HWREV

					// EBS Strategy
					tVal = tVal + byteValue.length;
					if (mValues.get("STRGY").equals("MFG_ID"))
						tStr = mValues.get("MFGID");
					else
						tStr = mValues.get("MAC").substring(0, 6);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw1, tVal, byteValue.length); // MAC
																					// FIRST
																					// 6
																					// CHARS
					tVal = tVal + byteValue.length;
					tStr = "00";
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw1, tVal, byteValue.length); // RPAD
																					// 00
					tVal = 0;

					// ////////////////////Build RAW 2 data///////////
					byte[] raw2 = new byte[32 + raw1.length];
					int pk_cert_offset = raw1.length + 8 * 4;
					int us_cert_offset = pk_cert_offset + 1024;
					int emm_1_offset = us_cert_offset + 1024;
					int emm_2_offset = emm_1_offset + 308;

					System.arraycopy(raw1, 0, raw2, tVal, raw1.length); // RAW1
																		// copy

					tVal = raw1.length;
					tStr = "0000" + helper.convertIntToHex(pk_cert_offset);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tInt = Integer.parseInt(mValues.get("PKLEN"));
					tStr = "0000" + helper.convertIntToHex(tInt);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tStr = "0000" + helper.convertIntToHex(us_cert_offset);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tInt = Integer.parseInt(mValues.get("USLEN"));
					tStr = "0000" + helper.convertIntToHex(tInt);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tStr = "0000" + helper.convertIntToHex(emm_1_offset);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tStr = "0000" + helper.convertIntToHex(308);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tStr = "0000" + helper.convertIntToHex(emm_2_offset);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tStr = "0000" + helper.convertIntToHex(308);
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw2, tVal, byteValue.length);

					tVal = 0;

					// ////////////////Build RAW 3
					// data/////////////////////////////////////////
					byte[] raw3 = new byte[emm1_Blob.length + emm2_Blob.length
							+ raw2.length + 2048];
					System.arraycopy(raw2, 0, raw3, tVal, raw2.length); // copy
																		// raw2

					tVal = raw2.length;
					tStr = mValues.get("PK");
					tStr = String.format("%1$-" + 2048 + "s", tStr).replaceAll(
							" ", "0");
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw3, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					tStr = mValues.get("US");
					tStr = String.format("%1$-" + 2048 + "s", tStr).replaceAll(
							" ", "0");
					byteValue = helper.hexStringToByteArray(tStr);
					System.arraycopy(byteValue, 0, raw3, tVal, byteValue.length);

					tVal = tVal + byteValue.length;
					System.arraycopy(emm1_Blob, 0, raw3, tVal, emm1_Blob.length); // copy
																					// emm1

					tVal = tVal + emm1_Blob.length;
					System.arraycopy(emm2_Blob, 0, raw3, tVal, emm2_Blob.length); // copy
																					// emm2
					if (raw3 != null && serialNumber != null){
						SimpleDateFormat format = new SimpleDateFormat("MMddyyyyhhmmss");
						 Date parsed = format.parse(mValues.get("MFGDATE"));
						 java.sql.Timestamp tDate = new java.sql.Timestamp(parsed.getTime());
						pstmt = DBConnectionFactory.prepareStatement(pimsCon, 
								PIMSConstants.UPDATEPRODQUERY, raw3, 
								tDate, raw3.length, serialNumber);
						pstmt.executeUpdate();
						pimsCon.commit();
					}
					tVal = 0;
					mValues.clear();
				}
				pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.UPDATEBQUERY, 
						PIMSConstants.STATUS_50,batchid);
				pstmt.executeUpdate();
				pimsCon.commit();
				this.logMessage(
						batchid,
						serialNumber,
						null,
						pimsLogging.getSequence(),
						pimsLogging.getPriorityHigh(),
						pimsLogging.getSuccessMsgId(),
						"Process 40_50 Completed, Batchid:"+batchid);

		} catch (SQLException sql) {
			this.logMessage(
					batchid,
					serialNumber,
					null,
					pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(),
					pimsLogging.getErrMsgId(),
					"Exception in 40_50 Process, Error Details:"
							+ sql.getMessage());
		} catch (Exception e) {
			this.logMessage(
					batchid,
					serialNumber,
					null,
					pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(),
					pimsLogging.getErrMsgId(),
					"Exception in 40_50 Process, Error Details:"
							+ e.getMessage());
		}finally{
			DBConnectionFactory.close(pstmt);
		}
			 
	}

	private Map<String, String> readValuesForSN(String dhctSN)
			throws SQLException {
		
		Map<String, String> mValues = new HashMap<String, String>();
		PreparedStatement pstmt = null;
		ResultSet rSet = null;
		
		pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.QUERYPROD40_50, dhctSN);
		rSet = pstmt.executeQuery();
		while (rSet.next()) {
			mValues.put("SMSN", rSet.getString("SM_SN"));
			mValues.put("MAC", rSet.getString("MAC_ADDR"));
			mValues.put("MODEL", rSet.getString("MODEL"));
			mValues.put("HWREV", rSet.getString("HW_REV"));
			mValues.put("MFGID", rSet.getString("MFG_ID"));
			mValues.put("STRGY", rSet.getString("STRATEGY"));
		}
		DBConnectionFactory.close(pstmt, rSet);
		pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.QUERYCERT_40_50, mValues.get("SMSN"));
		rSet = pstmt.executeQuery();
		while (rSet.next()) {
			mValues.put(rSet.getString("CERT_TYPE_CD"),
					rSet.getString("PUB_KEY_CERT"));
			mValues.put(rSet.getString("CERT_TYPE_CD") + "LEN",
					rSet.getString("PUB_KEY_CERT_LENGTH"));
		}
		DBConnectionFactory.close(pstmt, rSet);
		return mValues;
	}

	private void prepareProductTable_17_20(int batchid) {
		Map<String, String> mValues = new HashMap<String, String>();
		Map<String, String> mapID = new HashMap<String, String>();

		String serialNumber = null;

		boolean uStatus = true;

		int cnt = 0;
		int count = 0;

		PreparedStatement pstmt = null;
		ResultSet rSet = null;

		this.logMessage(batchid, null, null, pimsLogging.getSequence(),
				pimsLogging.getPriorityLow(), pimsLogging.getTrackingMsgId(),
				PIMSConstants.MSG_START_17_20);
		try {
			pstmt = DBConnectionFactory.prepareStatement(pimsCon,
					PIMSConstants.QUERYBDET_17_20, batchid);
			rSet = pstmt.executeQuery();
			while (rSet.next()) {
				serialNumber = rSet.getString("DHCT_SN");
				mValues = this.getSNAttribs(serialNumber);
				if (mValues.get("SMSN") == null) {
					this.logMessage(batchid, serialNumber, null,
							pimsLogging.getSequence(),
							pimsLogging.getPriorityHigh(),
							pimsLogging.getErrMsgId(),
							PIMSConstants.MSG_ERRSMSN_17_20);
					uStatus = false;
				}
				String mfgID = null;
				String tempStr = null;
				String custCAAID = null;
				tempStr = mValues.get("MODEL") + mValues.get("HWVER");
				mfgID = mapID.get(tempStr);
				if (mfgID == null) {
					cnt++;
					mfgID = getMfgID(mValues.get("MODEL"), mValues.get("HWVER"));
					mapID.put("HWVER" + cnt, mValues.get("HWVER"));
					if (mfgID == null) {
						mfgID = getMfgID(mValues.get("MODEL"),
								mValues.get("MATREVLEVEL"));
						mapID.put("HWVER" + cnt, mValues.get("MATREVLEVEL"));
					}
					mapID.put(tempStr, mfgID);
				}
				custCAAID = mapID.get(rSet.getString("SHIP_TO_CUST_ID"));
				if (custCAAID == null) {
					custCAAID = this.getCustID(rSet
							.getString("SHIP_TO_CUST_ID"));
					mapID.put(rSet.getString("SHIP_TO_CUST_ID"), custCAAID);
				}
				if (custCAAID == null) {
					this.logMessage(
							batchid,
							serialNumber,
							null,
							pimsLogging.getSequence(),
							pimsLogging.getPriorityHigh(),
							pimsLogging.getErrMsgId(),
							"No CUSTCAAID setup for SHIP_TO:"
									+ rSet.getString("SHIP_TO_CUST_ID")
									+ " for Serial Number:" + serialNumber
									+ " in Batch ID:" + rSet.getInt("BATCH_ID"));
					uStatus = false;
				}
				if (mfgID == null) {
					this.logMessage(
							batchid,
							serialNumber,
							null,
							pimsLogging.getSequence(),
							pimsLogging.getPriorityHigh(),
							pimsLogging.getErrMsgId(),
							"No MFGID setup for model:" + mValues.get("MODEL")
									+ " and HWVER/MATREVLEVEL "
									+ mValues.get("HWVER") + "/"
									+ mValues.get("MATREVLEVEL")
									+ " for Serial Number:" + serialNumber
									+ " in Batch ID:" + rSet.getInt("BATCH_ID"));
					uStatus = false;
				}
				mValues.put("SN", serialNumber);
				mValues.put("MFGID", mfgID);
				mValues.put("CAAID", custCAAID);
				mValues.put("HWVER", mapID.get("HWVER" + cnt));
				if (uStatus) {
					count++;
					this.insertProductTable(batchid,mValues,
							PIMSConstants.INSERTQUERY_17_20);
				}
				mValues.clear();
			}
			DBConnectionFactory.close(pstmt, rSet);
			mapID.clear();
			if (uStatus) {
				
				this.logMessage(batchid, null, null, pimsLogging.getSequence(),
						pimsLogging.getPriorityLow(),
						pimsLogging.getTrackingMsgId(),
						"Total records updated in Product Table:" + count);
				pimsCon.commit();
				pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.UPDATEBQUERY,PIMSConstants.STATUS_20,
						batchid);
				pstmt.executeUpdate();
				pimsCon.commit();
			} 
		} catch (SQLException sql) {
			this.logMessage(
					batchid,
					null,
					null,
					pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(),
					pimsLogging.getErrMsgId(),
					"DB Error in 17_20 Process, Error Details:"
							+ sql.getMessage());
		} catch (Exception e) {
			this.logMessage(
					batchid,
					null,
					null,
					pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(),
					pimsLogging.getErrMsgId(),
					"Exception in 17_20 Process, Error Details:"
							+ e.getMessage());

		} finally {
			DBConnectionFactory.close(pstmt, rSet);
		}
	}

	private void generateNothingBlob_20_30(int batchid) {
		String serialNumber = null;
		String smsn = null;
		String tString = "0";
		String tString1 = null;

		int finalLength = 0;
		int totLen = 0;

		Set<byte[]> blobData = new LinkedHashSet<byte[]>();

		byte[] byteValues = null;
		byte[] nothingBlob = null;
		byte[] tempValue = new byte[1024];

		Map<String, String> cValues = new HashMap<String, String>();

		PreparedStatement pstmt = null;
		ResultSet rSet = null;

		this.logMessage(batchid, null, null, pimsLogging.getSequence(),
				pimsLogging.getPriorityLow(), pimsLogging.getTrackingMsgId(),
				PIMSConstants.MSG_START_20_30);
		try {
			pstmt = DBConnectionFactory.prepareStatement(pimsCon,
					PIMSConstants.QUERYPROD_20_30, batchid);
			rSet = pstmt.executeQuery();
			while (rSet.next()) {
				serialNumber = rSet.getString("DHCT_SN");
				smsn = rSet.getString("SM_SN");
				cValues = this.populateCertificates(smsn,
						rSet.getString("SHIP_TO_CUST_ID"), batchid,
						serialNumber);
				if (cValues.size() != 6)
					continue;
				tString = "0";
				int certLen = Integer.parseInt(cValues.get("PKLEN"));
				int tlen = 1024 - certLen;
				tString = String.format(String.format("%%0%dd", tlen * 2), 0)
						.replace("0", tString);
				totLen = serialNumber.getBytes().length // dhct_sn length
						+ 2 // PK Certificate Length
						+ 1024 // PK Certificate length
						+ 128 // CUS_CAA
						+ 384 // SACAA
						+ 6 // SMSN length
						+ 6; // MAC Address
				byte[] finalValue = new byte[totLen];

				System.arraycopy(cValues.get("PKCERT").getBytes(), 0,
						tempValue, 0, certLen);
				byteValues = helper.hexStringToByteArray(tString);
				System.arraycopy(byteValues, 0, tempValue, certLen,
						byteValues.length);

				// Start building blob here
				System.arraycopy(serialNumber.getBytes(), 0, finalValue, 0,
						serialNumber.getBytes().length); // dhct_sn

				totLen = serialNumber.getBytes().length;
				tString1 = helper.convertIntToHex(certLen);
				byteValues = helper.hexStringToByteArray(tString1);
				System.arraycopy(byteValues, 0, finalValue, totLen,
						byteValues.length);// pk cert length

				totLen = totLen + byteValues.length;
				System.arraycopy(tempValue, 0, finalValue, totLen, 1024); // PK
																			// cert

				totLen = totLen + 1024;
				System.arraycopy(cValues.get("CKCERT").getBytes(), 0,
						finalValue, totLen, 128); // cust_caa

				totLen = totLen + 128;
				System.arraycopy(cValues.get("SACERT").getBytes(), 0,
						finalValue, totLen, 384); // sa_caa

				totLen = totLen + 384;
				byteValues = helper.hexStringToByteArray(smsn);
				System.arraycopy(byteValues, 0, finalValue, totLen,
						byteValues.length); // sm_sn

				totLen = totLen + byteValues.length;
				byteValues = helper.hexStringToByteArray(rSet
						.getString("MAC_ADDR"));
				System.arraycopy(byteValues, 0, finalValue, totLen,
						byteValues.length); // mac address

				totLen = totLen + byteValues.length;
				finalLength = finalLength + totLen;
				blobData.add(finalValue);
			}
			DBConnectionFactory.close(pstmt, rSet);
			if (blobData.size() > 0) {
				nothingBlob = new byte[finalLength];
				int i = 0;
				for (byte[] bytes : blobData) {
					System.arraycopy(bytes, 0, nothingBlob, i, bytes.length);
					i = i + bytes.length;
				}
				this.loadNothingBlob(PIMSConstants.UPDATEQUERY_20_30,
						nothingBlob, batchid);
				pimsCon.commit();
				this.sendNothingBlob("70", batchid, nothingBlob);
				pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.UPDATEBQUERY,PIMSConstants.STATUS_30,
						batchid);
				pstmt.executeUpdate();
				pimsCon.commit();
				this.logMessage(batchid, null, null, pimsLogging.getSequence(),
						pimsLogging.getPriorityLow(),
						pimsLogging.getSuccessMsgId(),
						"Nothing Blob updated for the batch id:" + batchid);
			}
		} catch (SQLException sql) {
			this.logMessage(
					batchid,
					serialNumber,
					null,
					pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(),
					pimsLogging.getErrMsgId(),
					"DB Error in 20_30 Process, Error Details:"
							+ sql.getMessage());
		} catch (Exception e) {
			this.logMessage(
					batchid,
					serialNumber,
					null,
					pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(),
					pimsLogging.getErrMsgId(),
					"Exception in 20_30 Process, Error Details:"
							+ e.getMessage());
			e.printStackTrace();

		} finally{
			DBConnectionFactory.close(pstmt, rSet);
		}
	}

	private Map<String, String> populateCertificates(String smsn,
			String shipCust, int batchid, String serialNumber) {
		int cnt = 0;
		Map<String, String> cValues = new HashMap<String, String>();

		PreparedStatement pstmt = null;
		ResultSet rSet = null;

		try {
			pstmt = DBConnectionFactory.prepareStatement(pimsCon,
					PIMSConstants.QUERYCERTS_20_30, smsn);
			rSet = pstmt.executeQuery();
			while (rSet.next()) {
				cnt++;
				cValues.put("PKLEN", rSet.getString("pub_key_cert_length"));
				cValues.put("PKCERT", rSet.getString("pub_key_cert"));
			}
			DBConnectionFactory.close(pstmt, rSet);
			if (cnt == 0) {
				this.logMessage(batchid, serialNumber, null,
						pimsLogging.getSequence(), pimsLogging.getPriorityHigh(),
						pimsLogging.getErrMsgId(),
						PIMSConstants.MSG_ERRCERT_20_30);
			}
			cnt = 0;
			pstmt = DBConnectionFactory.prepareStatement(pimsCon,
					PIMSConstants.QUERYSACERTS_20_30, smsn);
			rSet = pstmt.executeQuery();
			while (rSet.next()) {
				cValues.put("SALEN", rSet.getString("SA_CAA_PUB_KEYS_LENGTH"));
				cValues.put("SACERT", rSet.getString("SA_CAA_PUB_KEYS"));
				cnt++;
			}
			DBConnectionFactory.close(pstmt, rSet);
			if (cnt == 0)
				this.logMessage(batchid, serialNumber, null,
						pimsLogging.getSequence(), pimsLogging.getPriorityHigh(),
						pimsLogging.getErrMsgId(),
						PIMSConstants.MSG_ERRSACERT_20_30);

			cnt = 0;
			pstmt = DBConnectionFactory.prepareStatement(pimsCon,
					PIMSConstants.QUERYCKCERTS_20_30, shipCust);
			rSet = pstmt.executeQuery();
			while (rSet.next()) {
				cValues.put("CKLEN", rSet.getString("CUST_CAA_PUB_KEY_LENGTH"));
				cValues.put("CKCERT", rSet.getString("CUST_CAA_PUB_KEY"));
				cnt++;
			}
			DBConnectionFactory.close(pstmt, rSet);
			if (cnt == 0)
				this.logMessage(batchid, serialNumber, null,
						pimsLogging.getSequence(), pimsLogging.getPriorityHigh(),
						pimsLogging.getErrMsgId(),
						PIMSConstants.MSG_ERRCKCERT_20_30);

		} catch (SQLException sql) {
			sql.printStackTrace();
			this.logMessage(batchid, serialNumber, null,
					pimsLogging.getSequence(), pimsLogging.getPriorityHigh(),
					pimsLogging.getErrMsgId(),
					"DB Error in 20_30 Process while reading certificates data, Error Details:"
							+ sql.getMessage());
		}
		return cValues;

	}

	public void sendNothingBlob(String siteID, int batchID, byte[] nothingBlob) {
		PreparedStatement pstmt = null;
		ResultSet rSet = null;

		String priKeyLoc = null;
		String status = null;

		CustomFTP ftpClient = null;
		CustomSFTP sftpClient = null;

		int port = 0;

		try {
			pstmt = DBConnectionFactory.prepareStatement(pimsCon,
					PIMSConstants.QUERYFTPSITEID, siteID);
			rSet = pstmt.executeQuery();
			while (rSet.next()) {
				String tserverName = rSet.getString("SITE_ADDRESS");
				String serverName = null;
				String userName = rSet.getString("USER_ID");
				String ftpPwd = rSet.getString("PASSWORD");
				String toLocation = rSet.getString("HOME_DIRECTORY");
				String fileName = String.format("%08d", batchID);
				priKeyLoc = osName.equalsIgnoreCase("Windows") ? propFile
						.getProperty("WindowsPubKeyLoc") : propFile
						.getProperty("UnixPubKeyLoc");
				// Get Port from IP Address
				if (tserverName.contains(":")) {
					serverName = tserverName.substring(0,
							tserverName.indexOf(":") + 1).trim();
					port = Integer.parseInt(tserverName.substring(tserverName
							.indexOf(":") + 1));
				} else if (tserverName.contains(" ")) {
					serverName = tserverName.substring(0,
							tserverName.indexOf(" ") + 1).trim();
					port = Integer.parseInt(tserverName.substring(tserverName
							.indexOf(" ") + 1));
				}

				if (port < 1)
					port = 21;
				if (port <= 21) {
					ftpClient = new CustomFTP(serverName, userName, ftpPwd,
							toLocation, fileName, nothingBlob);
					status = ftpClient.ftpSendFile();
				} else if (port >= 22) {
					sftpClient = new CustomSFTP(serverName, userName, ftpPwd,
							toLocation, fileName, nothingBlob, port,
							"public key", priKeyLoc,
							propFile.getProperty("EULA"));
					status = sftpClient.sftpSend();
				}

				if (status.contains(PIMSConstants.FILESTATUS)) {
					this.logMessage(batchID, null, null,
							pimsLogging.getSequence(),
							pimsLogging.getPriorityLow(),
							pimsLogging.getSuccessMsgId(),
							"Nothing Blob sent successfully with fileName: "
									+ fileName + " to Location " + toLocation
									+ " on server:" + serverName);
				}
			}
		} catch (SQLException sql) {
			this.logMessage(batchID, null, null, pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(), pimsLogging.getErrMsgId(),
					"DB Error in 20_30 Process while FTPing Nothing Blob to Site ID"
							+ siteID + ", Error Details:" + sql.getMessage());
		} finally {
			DBConnectionFactory.close(pstmt, rSet);
		}

	}

	public String getCustID(String shipToID) throws SQLException {
		String custID = null;

		PreparedStatement pstmt = null;
		ResultSet rSet = null;

		pstmt = DBConnectionFactory.prepareStatement(pimsCon,
				PIMSConstants.QUERYCAAGET, shipToID);
		rSet = pstmt.executeQuery();
		while (rSet.next())
			custID = rSet.getString(1);
		DBConnectionFactory.close(pstmt, rSet);
		return custID;
	}

	public String getMfgID(String model, String hwverOrMatRev)
			throws SQLException {

		String mfgID = null;

		PreparedStatement pstmt = null;
		ResultSet rSet = null;
		pstmt = DBConnectionFactory.prepareStatement(pimsCon,
				PIMSConstants.QUERYMFGID, model, hwverOrMatRev);
		rSet = pstmt.executeQuery();
		while (rSet.next())
			mfgID = rSet.getString(1);

		DBConnectionFactory.close(pstmt, rSet);
		return mfgID;
	}

	public Map<String, String> getSNAttribs(String serialNumber)
			throws SQLException {
		PreparedStatement pstmt = null;
		ResultSet rSet1 = null;

		String formatString = null;

		Map<String, String> mValues = new HashMap<String, String>();

		pstmt = DBConnectionFactory.prepareStatement(pimsCon,
				PIMSConstants.QUERYSNGET, serialNumber);
		rSet1 = pstmt.executeQuery();
		while (rSet1.next()) {
			switch (rSet1.getInt("ATTRIBUTE_ID")) {
			case 5: // MFGDATE
				mValues.put("MFGDATE", rSet1.getString("ATTRIBUTE_VALUE"));
				break;
			case 71: // SMSN
				mValues.put("SMSN", rSet1.getString("ATTRIBUTE_VALUE"));
				break;
			case 7: // MACADDR
				if (rSet1.getString("ATTRIBUTE_SEQUENCE").equals("1"))
					mValues.put("MACADDR", rSet1.getString("ATTRIBUTE_VALUE"));
				break;
			case 20: // MODEL
				formatString = rSet1.getString("ATTRIBUTE_VALUE");
				formatString = formatString.replaceAll("[^0-9]", "");
				mValues.put("MODEL", formatString);
				break;
			case 14: // HWVER
				formatString = rSet1.getString("ATTRIBUTE_VALUE");
				formatString = formatString.replaceAll("\\.", "");
				if (formatString.contains("0x"))
					formatString = "01";
				mValues.put("HWVER", formatString);
				break;
			case 16: // MATERIALREVLEVEL
				formatString = rSet1.getString("ATTRIBUTE_VALUE");
				formatString = formatString.replaceAll("\\.", "");
				mValues.put("MATREVLEVEL", formatString);
				break;

			default:
				// do nothing
				break;
			}
		}
		DBConnectionFactory.close(pstmt, rSet1);
		return mValues;
	}

	private void process30_40() {
		PreparedStatement pstmt = null;
		String fileTemp = null;
		String file1 = null;
		String fileType = null;
		String filePath_30_40 = null;
		int batchid = 0;
		int whichBlob = 0;
		byte[] result = null;
		boolean fileOne = false;
		boolean fileTwo = false;
		filePath_30_40 = osName.equalsIgnoreCase("Windows") ? propFile
				.getProperty("WindowsFileLoc_30_40") : propFile
				.getProperty("UnixFileLoc_30_40");
		try {
			File fileFolder = new File(filePath_30_40);
			if (fileFolder != null) {
				for (final File fileEntry : fileFolder.listFiles()) {
					if (!fileEntry.isDirectory()) {
						fileTemp = fileEntry.getName();
						File currentFile = new File(filePath_30_40 + fileTemp);
						InputStream input = new BufferedInputStream(
								new FileInputStream(currentFile));
						result = helper.readAndClose(input);
						int i = fileTemp.indexOf(".");
						file1 = fileTemp.substring(0, i);
						fileType = fileTemp.substring(i + 1, fileTemp.length());
						batchid = Integer.parseInt(file1.replaceFirst(
								"^0+(?!$)", ""));
						this.logMessage(batchid, null, null,
								pimsLogging.getSequence(),
								pimsLogging.getPriorityLow(),
								pimsLogging.getSuccessMsgId(),
								"Entered 30_40 Process");
						if (fileType.equals("1")) {
							whichBlob = 1;
							fileOne = true;
						} else if (fileType.equals("2")) {
							whichBlob = 2;
							fileTwo = true;
						}
						if (whichBlob != 0 && result != null) {
							if (whichBlob == 1){
								this.loadNothingBlob(
										PIMSConstants.UPDATEQUERYEMM130_40,
										result, batchid);
								this.logMessage(batchid, null, null,
										pimsLogging.getSequence(),
										pimsLogging.getPriorityLow(),
										pimsLogging.getSuccessMsgId(),
										"Loaded EMM1 Blob into table");
							}else if (whichBlob == 2){
								this.loadNothingBlob(
										PIMSConstants.UPDATEQUERYEMM230_40,
										result, batchid);
								this.logMessage(batchid, null, null,
										pimsLogging.getSequence(),
										pimsLogging.getPriorityLow(),
										pimsLogging.getSuccessMsgId(),
										"Loaded EMM2 Blob into table");
							}
							currentFile.delete();
						}
					}
				}
				if (!fileOne)
					this.logMessage(batchid, null, null,
							pimsLogging.getSequence(),
							pimsLogging.getPriorityHigh(),
							pimsLogging.getErrMsgId(),
							"File 1 is missing in 30_40 process for batchid:"
									+ batchid);
				if (!fileTwo)
					this.logMessage(batchid, null, null,
							pimsLogging.getSequence(),
							pimsLogging.getPriorityHigh(),
							pimsLogging.getErrMsgId(),
							"File 2 is missing in 30_40 process for batchid:"
									+ batchid);
				if (fileOne && fileTwo) {
					pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.UPDATEQUERYSTAT30_40,
							PIMSConstants.STATUS_40,batchid);
					pimsCon.commit();
					pstmt.executeUpdate();
				}
			}
		} catch (SQLException sql) {
			this.logMessage(batchid, null, null, pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(), pimsLogging.getErrMsgId(),
					"Error in 30_40 Process while upload blobs, Error Details:"
							+ sql.getMessage());
		}catch (FileNotFoundException e) {
			this.logMessage(batchid, null, null, pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(), pimsLogging.getErrMsgId(),
					"Error in 30_40 Process while upload blobs, Error Details:"
							+ e.getMessage());
		}finally{
			DBConnectionFactory.close(pstmt);
		}
	}

	public void logMessage(int iBatchId, String iDhctSn, String iItemNo,
			int iSeqNo, String iPriority, Integer iMessageId,
			String iMessageDetails) {
		PreparedStatement pstmt = null;
		String messageType;
		String errorDump;
		int messageId;
		if (iMessageId == null) {
			messageId = 0;
		} else {
			messageId = iMessageId;
		}
		if (messageId == pimsLogging.getErrMsgId()) {
			messageType = pimsLogging.getErrMsgType();
		} else if (messageId == pimsLogging.getSuccessMsgId()) {
			messageType = pimsLogging.getSuccessMsgType();
		} else if (messageId == pimsLogging.getTrackingMsgId()) {
			messageType = pimsLogging.getTrackingMsgType();
		} else if (messageId == pimsLogging.getWarningMsgId()) {
			messageType = pimsLogging.getWarningMsgType();
		} else {
			messageType = pimsLogging.getErrMsgType();
		}
		// Get Environment Details of DB and its Connection
		try {
			errorDump = (messageId == pimsLogging.getErrMsgId()) ? this
					.getErrorReport(iBatchId) : null;
		    pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.LOGUPDATEQUERY, iBatchId, 
		    		iDhctSn, iItemNo, iSeqNo, messageType, messageId, iMessageDetails, errorDump);
			pstmt.executeUpdate();
			pimsCon.commit();
		} catch (SQLException e) {
			System.out.println("Error while Updating Log message");
		}finally {
			DBConnectionFactory.close(pstmt);
		}
	}

	private String getErrorReport(int batchid){
		String errMsg = null;
		String serverName = null;
		String dbInstance = null;
		int sepPos;
		PreparedStatement pstmt = null;
		ResultSet rSet = null;
		
		try {
		// Get Environment Details of DB and its Connection
		pstmt = DBConnectionFactory.prepareStatement(pimsCon, PIMSConstants.LOGINITQUERY);
		rSet = pstmt.executeQuery();
		while (rSet.next()) {
			serverName = rSet.getString(1);
			sepPos = serverName.indexOf("\\");
			dbInstance = serverName.substring(sepPos + 1, serverName.length());
			serverName = serverName.substring(0, sepPos);
			errMsg = PIMSConstants.COM_ERR_RPT
					+ "' + CHAR(13)+CHAR(10) + CHAR(13)+CHAR(10) + 'DATABASE DETAILS' + CHAR(13)+CHAR(10) + 'Host: "
					+ serverName
					+ "' + CHAR(13)+CHAR(10) + 'Instance: "
					+ dbInstance
					+ "' + CHAR(13)+CHAR(10) + 'DB Name: "
					+ rSet.getString(2)
					+ "' + CHAR(13)+CHAR(10) + 'Schema Name: "
					+ rSet.getString(3)
					+ "' + CHAR(13)+CHAR(10) + CHAR(13)+CHAR(10) + "
					+ "'CONNECTION DETAILS' + CHAR(13)+CHAR(10) + 'Session Id: "
					+ rSet.getString(4)
					+ "' + CHAR(13)+CHAR(10) + 'Session User: "
					+ rSet.getString(5) + "' + CHAR(13)+CHAR(10) + 'Terminal: "
					+ rSet.getString(6) + "' + CHAR(13)+CHAR(10) + 'Program: "
					+ rSet.getString(7);
		}
		}catch (SQLException sql) {
			this.logMessage(batchid, null, null, pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(), pimsLogging.getErrMsgId(),
					"Error in 30_40 Process while upload blobs, Error Details:"
							+ sql.getMessage());
		}finally{
			DBConnectionFactory.close(pstmt);
		}
		return errMsg;
	}

	public void insertProductTable(int batchid, Map<String, String> mValues,
			String insertQuery) {
		PreparedStatement updateTable = null;
		try {
			updateTable = pimsCon.prepareStatement(insertQuery);
			updateTable.setString(1, mValues.get("SN")); // DHCT_SN
			updateTable.setString(2, mValues.get("SMSN"));
			updateTable.setString(3, mValues.get("MACADDR"));
			updateTable.setString(4, mValues.get("MODEL"));
			updateTable.setString(6, mValues.get("MFGDATE"));
			updateTable.setString(5, mValues.get("HWVER")); // HW REV
			updateTable.setString(7, mValues.get("CAAID"));
			updateTable.setString(8, mValues.get("MFGID"));
			updateTable.executeUpdate();
			mValues.clear();
		} catch (SQLException sql) {
			this.logMessage(batchid, mValues.get("SN"), null, pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(), pimsLogging.getErrMsgId(),
					"Error while updating Nothing Blob for the batch id:"
							+ batchid + ", Error Details:" + sql.getMessage());
		}finally{
			DBConnectionFactory.close(updateTable);
		}
	}

	public void loadNothingBlob(String updateQuery, byte[] nothingBlob,
			int batchid) {
		PreparedStatement updateBatch = null;
		try {
			updateBatch = DBConnectionFactory.prepareStatement(pimsCon, updateQuery,nothingBlob,batchid);
			updateBatch.executeUpdate();
			pimsCon.commit();
		} catch (SQLException sql) {
			this.logMessage(batchid, null, null, pimsLogging.getSequence(),
					pimsLogging.getPriorityHigh(), pimsLogging.getErrMsgId(),
					"Error while updating Nothing Blob for the batch id:"
							+ batchid + ", Error Details:" + sql.getMessage());
		} finally {
			DBConnectionFactory.close(updateBatch);
		}
	}
}
